# read fasta file and save it as input text

def read_fastfile(filename):
  """
  Reads the content of a Fastfile and returns it as a string.

  Args:
      filename: The path to the Fastfile.

  Returns:
      The content of the Fastfile as a string, or None if there's an error.
  """
  try:
    with open(filename, "r") as fastfile:
      # Skip the first line
      next(fastfile)
      # Read remaining lines, strip newlines, and join them
      content = "".join(line.strip() for line in fastfile)
      return content
  except FileNotFoundError:
    print(f"Error: Fastfile '{filename}' not found.")
    return None

fastfile_path = r"C:\Users\ihver\Desktop\BIO191Project\L_plantarum\ncbi_dataset\data\GCF_009913655.1\GCF_009913655.1_ASM991365v1_genomic.fna"
fastfile_content = read_fastfile(fastfile_path)

#prints the fasta file input
# if fastfile_content:
#   # Now you can use the fastfile_content variable
#   print(fastfile_content[:100] + "... (truncated)")  # Print first 100 characters
# else:
#   print("Failed to read Fastfile.")

# print(fastfile_content)
# function in getting gyrA
def find_gyra_in_fasta(fasta_content, gyrA_sequences):
  """
  Checks if any of the gyrA sequences are present in the fasta content.

  Args:
      fasta_content: The content of the fasta file as a string.
      gyrA_sequences: A list of gyrA reference sequences.

  Returns:
      A list of gyrA sequences found in the fasta content. and if it is present
  """
  found_gyra = []
  for sequence in gyrA_sequences:
    if sequence in fasta_content:
      found_gyra.append(sequence)
  return found_gyra





# define the genomes and its sequence as a list
gyrA=[]
gyrA_reference="TTGGCTGATTCAGATTTATCGAACAATCGTATTTCGGATGTGAACCTTTCGAAGACCATGCGAACGTCATTCTTAAGCTATGCCATGAGTGTTATCGTGGCACGGGCACTGCCGGACGTACGTGATGGGTTAAAGCCAGTGCACCGGCGGATTCTTTACGGTATGAGTGAATTAGGTGTGACGCCGGATAAGCCGTATAAGAAGTCGGCCCGGATTGTTGGGGATGTTATGGGGAAGTATCATCCCCATGGTGACTCCGCAATTTATGAGTCAATGGTGCGGATGGCCCAAGACTTTAGCTATCGCTACATGTTAGTGGATGGTCACGGGAACTTCGGTTCTGTCGATGGTGACGGGGCTGCCGCGATGCGGTATACCGAAGCCCGGATGAGTAAGATTGCGGTTGAAATGCTCCGCGATATTAACAAGGATACCGTTGATTGGCAACCAAACTATGATGATACAGAACGGGAACCAGCAGTCTTACCAGCACGTTTCCCGAACCTACTCGTTAACGGTGCCACTGGGATTGCTGTTGGGATGACAACAAACATTCCGCCACATAACTTAGCGGAAGTCATTTCAGCAATCCACCTGTTGATGGATAATCCTGATGCAACAGTTGCTGACTTGATGGAAGTCTTACCTGGACCAGATTTTCCAACTGGCGGGATCGTAATGGGAAAGTCCGGTATTCGTAAGGCTTACCAGACTGGTCGTGGGAACATTATTGTTCGTGCGAAGGTCGATATTCAAGACCAAAAGAATGGTAAGCAACGAATTATCGTGACCGAATTACCATATATGGTCAATAAAGCTAAATTGATCGAACGGATTGCTGGTTTAGCTCGAGACAAGGAAATTGAAGGTATCACTGATATCAATGATGAAAGTGACCGTGAAGGGATGCGGATCGTCATTGATGTTCGGCGGGATGCCAGCGCCTCGGTTATCTTGAATAACCTTTACAAGATGACATTGATGCAGACTAACTTTGGCTTTAACATGTTAGCCATCGTTAAGGGTGCTCCAAAAGTCTTAAGCTTAAAGCAAATCTTAATCTATTACCTGGAACACCAAGAAGACGTGATTCGGCGTCGGACTGAGTTTGACTTGAAGAAAGCCCAAGCACGGGCCCATATTCTTGAAGGCTTACGGATTGCCCTTGATCACATTGATGAAATCATTGCGATTATTCGTCAATCACAAACGAGTGAAATTGCGAAGAACCAATTGATGGATAATTACGGCTTGTCTGATAAGCAGGCACAAGCCATTCTTGATATGCGGTTAGTCCGGTTAACTGGTTTGGAACGTGAAAAGATCGAGAGTGAATACCAGGACTTATTGAAAGCCATTGCTGACTACAAAGAAATCTTAGCTAGCAAGGATCGTATCAACCAAATTATTTACGAAGAATTAATGGAAATTCAACGTAAGTTTGGTGATAAGCGTCGGACCGAATTGATGGTCGGTGAAGTCCTCAGTATTGAAGATGAAGACTTGATCGAAGAAGAAGAAGTGGCTGTTACCTTAACTCACAATGGCTACATCAAACGGTTACCAACGACTGAATTTAAGTCGCAACACCGTGGTGGTCGTGGGATTCAAGGGATGGACGTCCATGATGATGACTTTATTGAACATCTCCTGACGACGTCGACCCATGATGTCCTACTCTTTTTCACTAATGCGGGTAAAGTTTACCGGATGAAGGCTTACGAGATTCCTGAATACGGTCGTACGGCCAAAGGAATCCCGGTCATCAATTTACTGGGAGTCAATTCTGGTGAAAAAATTCAGGCGGTCGTTAATGTCACGGGCGATGCGAGCGCTTCTGATAACTACCTGTTCTTTACAACCGTTAAAGGGGTTGTCAAACGGACACCAGTTCAAGAATTTGCCAATATCCGTAGTAATGGTTTGAAGGCCATTACGCTTAAGGATGATGATGAATTAATCGGGGTTACAATCACGGATGGTCACCAAAATGTAATCATCGGGACGCACGACGGTTATGCCGTCAGTTTCGACGAAACCACAGTGCGGTCCATGGGCCGGACGGCTTCTGGGGTTCGCGGGATTCGCTTACGCGATGATGACTTTGTGATTGGCTTTGACGTTTTGAAGCCCGACAGCAACGTCTTCATCATCACGGAAAAGGGTTATGGGAAACAAACGCCAGCTGCCGATTACCCAATTAAGGGGCGTGGTGGCAAAGGAATCAAGACCGCTAACGTGACTGAGAAGAATGGTCATTTAGCTGGCTTGACGACGGTTGATGGTCAAGAAGATATCATGGTAATGACGAACCAAGGGGTCATGATTCGCTTCAATATCGCAACCGTTTCTCAGACTGGTCGGGCAACCTTAGGTGTTCGTCTCATGCGGTTAGGCGATGATGGTCAAGTCGCAACGATGGCCAAGGTTGATCCAGAGCCAGAAGTTGATGAGACTGTCGCAACGGATGCAACGACTGAGGCACCAGTTGACGATCAAACCGTCAACGCCGATGCCACTACGACAGAACCAACAACTGATTCAAACGATTCAAACGAATAA"
# print(gyrA_reference)
gyrA.append(gyrA_reference)
gyrA_strain1="TTGGCTGATTCAGATTTATCGAACAATCGTATTTCGGATGTGAACCTTTCGAAGACCATGCGAACGTCATTCTTAAGCTATGCCATGAGTGTTATCGTGGCACGGGCACTGCCGGACGTACGTGATGGGTTAAAGCCAGTGCACCGGCGGATTCTTTACGGTATGAGTGAATTAGGTGTGACGCCGGATAAGCCGTATAAGAAGTCGGCCCGGATTGTTGGGGATGTTATGGGGAAGTATCATCCCCATGGTGACTCCGCAATTTATGAGTCAATGGTGCGGATGGCCCAAGACTTTAGCTATCGCTACATGTTAGTGGATGGTCACGGGAACTTCGGTTCTGTCGATGGTGACGGGGCTGCCGCGATGCGGTATACCGAAGCCCGGATGAGTAAGATTGCGGTTGAAATGCTCCGCGATATTAACAAGGATACCGTTGATTGGCAACCAAACTATGATGATACAGAACGGGAACCAGCAGTCTTACCAGCACGTTTCCCGAACTTACTCGTTAACGGTGCCACTGGGATTGCTGTTGGGATGACAACAAACATTCCGCCACATAACTTAGCGGAAGTCATTTCAGCAATCCACCTGTTGATGGATAATCCTGATGCAACAGTTGCTGACTTGATGGAAGTCTTACCTGGACCAGATTTTCCAACTGGCGGGATCGTAATGGGAAAGTCCGGTATTCGTAAGGCTTACCAGACTGGTCGTGGGAACATTATTGTTCGTGCGAAGGTCGATATTCAAGACCAAAAGAATGGTAAGCAACGAATTATCGTGACTGAATTACCATATATGGTCAATAAAGCTAAATTGATCGAACGGATTGCTGGTTTAGCTCGAGACAAGGAAATTGAAGGTATCACTGATATCAATGATGAAAGTGACCGTGAAGGGATGCGGATCGTCATTGATGTTCGGCGGGATGCCAGCGCCTCGGTTATCTTGAATAACCTTTACAAGATGACATTGATGCAGACTAATTTTGGCTTTAACATGTTAGCCATCGTTAAGGGTGCTCCAAAAGTCTTAAGCTTAAAGCAAATCTTAATCTATTACCTGGAACACCAAGAAGACGTGATTCGGCGTCGGACTGAGTTTGACTTGAAGAAAGCCCAAGCACGGGCCCATATTCTTGAAGGCTTACGGATTGCCCTTGATCACATTGATGAAATCATTGCGATTATTCGTCAATCACAAACGAGTGAAATTGCGAAGAACCAATTGATGGATAATTACGGCTTGTCTGATAAGCAGGCACAAGCCATTCTTGATATGCGGTTAGTCCGGTTAACTGGTTTGGAACGTGAAAAGATCGAGAGTGAATACCAGGACTTATTGAAAGCCATTGCTGACTACAAAGAAATCTTAGCTAGCAAGGATCGTATCAACCAAATTATTTACGAAGAATTAATGGAAATTCAACGTAAGTTTGGTGATAAGCGTCGGACCGAATTGATGGTCGGTGAAGTCCTCAGTATTGAAGATGAAGACTTGATCGAAGAAGAAGAAGTGGCTGTTACCTTAACTCACAATGGCTACATCAAACGGTTACCAACGACTGAATTTAAGTCGCAACACCGTGGTGGTCGTGGGATTCAAGGGATGGACGTCCATGATGATGACTTTATTGAACATCTACTGACGACGTCGACCCATGATGTCCTACTCTTTTTCACTAATGCGGGTAAAGTTTACCGGATGAAGGCTTACGAGATTCCTGAATACGGTCGTACGGCCAAAGGAATCCCGGTCATCAATTTACTGGGAGTCAATTCTGGTGAAAAAATTCAGGCGGTCGTTAATGTCACGGGCGATGCGAGCGCTTCTGATAACTACCTGTTCTTTACAACCGTTAAAGGGGTTGTCAAACGGACACCAGTTCAAGAATTTGCCAATATCCGTAGCAATGGTTTGAAGGCCATTACGCTTAAGGATGATGATGAATTAATCGGGGTTACAATCACGGATGGTCACCAAAATGTAATCATCGGGACGCACGACGGTTATGCCGTCAGTTTCGACGAAACCACAGTGCGGTCCATGGGCCGGACGGCTTCTGGGGTTCGCGGGATTCGCTTACGCGATGATGACTTTGTGATTGGCTTTGACGTTTTGAAGCCCGACAGCAACGTCTTCATCATCACGGAAAAGGGTTATGGGAAACAAACGCCAGCTGCCGATTACCCAATTAAGGGGCGTGGTGGCAAAGGAATCAAGACCGCTAACGTGACTGAGAAGAATGGTCATTTAGCTGGTTTGACGACGGTTGATGGTCAAGAAGATATCATGGTAATGACGAACCAAGGAGTCATGATTCGCTTCAATATCGCAACCGTTTCTCAGACTGGTCGGGCAACCTTAGGTGTTCGTCTCATGCGGTTAGGCGATGATGGTCAAGTCGCAACGATGGCCAAGGTTGATCCAGAGCCAGAAGTTGATGAGACTGTCGCAACGGATGCAACGACTGAGGCACCAGTTGACGATCAAACCGTCAACGCCGATGCCACTACGACAGAACCAACAACTGATTCAAACGATTCAAACGAATAA"
gyrA.append(gyrA_strain1)
# print(gyrA)
# make a choice for user which genome to find
 
def menu():
  """
  Displays the menu and gets user input.
  """
  print("\n--- Menu ---")
  print("1. gyrA")
  print("2. genome2")
  print("3. Exit")
  choice = input("Enter your choice (1-3): ")
  return choice

def main():
  """
  Main function that keeps the menu loop running.
  """
  while True:
    user_choice = menu()
    if user_choice == "1":
        
      # Call the function to find gyrA sequences
        found_gyra_sequences = find_gyra_in_fasta(fastfile_content, gyrA)
        print(found_gyra_sequences)
        print("hi")
        print(gyrA)
        print("hotfog")
        print(found_gyra_sequences[0])
        if found_gyra_sequences:
            print("gyrA is found in your input file.")
            print("gyrA sequences found in the fasta file:")
            for sequence in found_gyra_sequences:
                print(sequence)
        else:
            print("No gyrA sequences found in the fasta file.")

        print("You selected option 1")
    elif user_choice == "2":
      # Code for option 2
      print("You selected option 2")
    elif user_choice == "3":
      print("Exiting program...")
      break
    else:
      print("Invalid choice. Please try again.")

if __name__ == "__main__":
  main()

    # 